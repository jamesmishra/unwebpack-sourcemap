name: release

defaults:
  run:
    shell: bash

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os:
          - "ubuntu-20.04"
          - "macos-11"

    steps:
    - name: Check out the codebase.
      uses: actions/checkout@v2

    - name: Set up Node.js 16.
      uses: actions/setup-node@v3
      with:
        node-version: "16"

    - name: Set up Python 3.8.
      uses: actions/setup-python@v2
      with:
        python-version: "3.8"

    - name: Install pip and poetry.
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install poetry
        python3 -m poetry config virtualenvs.in-project true
  
    - name: Install unpackweb-sourcemap.
      run: |
        python3 -m poetry install

    - name: Get the version from the GitHub tag.
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}

    - name: Build the wheel (Ubuntu only).
      id: publish_to_pypi
      run: |
        python3 -m poetry version ${{ steps.get_version.outputs.VERSION }}
        python3 -m poetry build
      if: startsWith(matrix.os,'ubuntu')

    - name: Publish wheel to PyPI (Ubuntu only).
      id: publish_wheel_to_poetry
      run: python3 -m poetry publish --no-interaction
      if: startsWith(matrix.os,'ubuntu')
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}

    - name: Create GitHub release (Ubuntu only).
      id: create_release
      uses: actions/create-release@v1
      if: startsWith(matrix.os,'ubuntu')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Python wheel to the GitHub release (Ubuntu only).
      id: upload_python_wheel
      uses: actions/upload-release-asset@v1
      if: startsWith(matrix.os,'ubuntu')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./dist/unwebpack-sourcemap-${{ steps.get_version.outputs.VERSION }}-py3-none-any.whl
        asset_name: unwebpack-sourcemap-${{ steps.get_version.outputs.VERSION }}-py3-none-any.whl
        asset_content_type: application/x-wheel+zip

    - name: Upload Python tar.gz to the GitHub release (Ubuntu only).
      id: upload_python_targz
      uses: actions/upload-release-asset@v1
      if: startsWith(matrix.os,'ubuntu')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./dist/unwebpack-sourcemap-${{ steps.get_version.outputs.VERSION }}.tar.gz
        asset_name: unwebpack-sourcemap-${{ steps.get_version.outputs.VERSION }}.tar.gz
        asset_content_type: application/gzip

    - name: Build PyInstaller binary.
      id: build_pyinstaller_binary
      run: python3 -m poetry run pyinstaller --name=unwebpack-sourcemap --onefile --clean --noconfirm unwebpack_sourcemap.py

    - name: Upload PyInstaller binary to the GitHub release.
      id: upload_pyinstaller_binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./dist/unwebpack-sourcemap
        asset_name: unwebpack-sourcemap-${{ steps.get_version.outputs.VERSION }}-${{ runner.os }}-${{ runner.arch }}
        asset_content_type: application/octet-stream
